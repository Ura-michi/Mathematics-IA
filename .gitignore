import copy

RCD = [
    [0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1],
    [2,2,2,2,2,2,2,2,2],
    [3,3,3,3,3,3,3,3,3],
    [4,4,4,4,4,4,4,4,4],
    [5,5,5,5,5,5,5,5,5]]

RCD_2 = [
    [0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1],
    [2,2,2,2,2,2,2,2,2],
    [3,3,3,3,3,3,3,3,3],
    [4,4,4,4,4,4,4,4,4],
    [5,5,5,5,5,5,5,5,5]]

RCD_3 = []

RCD_4 = []

RCD_5 = []

RCD_6 = []

Comb_1 = []
Comb_2 = []
Comb_3 = []
Comb_4 = []
Comb_5 = []
Comb_6 = []
Comb_7 = []
Comb_8 = []
Comb_9 = []
Comb_10 = []
Comb_11 = []
Comb_12 = []
Comb_13 = []
Comb_14 = []
Comb_15 = []
Comb_16 = []
Comb_17 = []
Comb_18 = []
    
def moves(e,b,u):
    for z in range(18):
        b.append([
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0]])
    for i in range(18):
        for x in range(9):
            for y in range(6):
                RCD_2[y][x] = e[y][x]
        if i%3 == 0:
            RCD_2[i//3][2] = e[i//3][0]
            RCD_2[i//3][5] = e[i//3][1]
            RCD_2[i//3][8] = e[i//3][2]
            RCD_2[i//3][1] = e[i//3][3]
            RCD_2[i//3][4] = e[i//3][4]
            RCD_2[i//3][7] = e[i//3][5]
            RCD_2[i//3][0] = e[i//3][6]
            RCD_2[i//3][3] = e[i//3][7]
            RCD_2[i//3][6] = e[i//3][8]

            if i//3 == 0:
                RCD_2[3][2]= e[5][6]
                RCD_2[3][1]= e[5][7]
                RCD_2[3][0]= e[5][8]

                RCD_2[2][2]= e[3][2]
                RCD_2[2][1]= e[3][1]
                RCD_2[2][0]= e[3][0]

                RCD_2[1][2]= e[2][2]
                RCD_2[1][1]= e[2][1]
                RCD_2[1][0]= e[2][0]

                RCD_2[5][6]= e[1][2]
                RCD_2[5][7]= e[1][1]
                RCD_2[5][8]= e[1][0]

            elif i//3 == 1:
                RCD_2[2][0]= e[0][0]
                RCD_2[2][3]= e[0][3]
                RCD_2[2][6]= e[0][6]

                RCD_2[4][0]= e[2][0]
                RCD_2[4][3]= e[2][3]
                RCD_2[4][6]= e[2][6]

                RCD_2[5][0]= e[4][0]
                RCD_2[5][3]= e[4][3]
                RCD_2[5][6]= e[4][6]

                RCD_2[0][0]= e[5][0]
                RCD_2[0][3]= e[5][3]
                RCD_2[0][6]= e[5][6]

            elif i//3 == 2:
                RCD_2[3][0]= e[0][6]
                RCD_2[3][3]= e[0][7]
                RCD_2[3][6]= e[0][8]

                RCD_2[4][2]= e[3][0]
                RCD_2[4][1]= e[3][3]
                RCD_2[4][0]= e[3][6]

                RCD_2[1][8]= e[4][2]
                RCD_2[1][5]= e[4][1]
                RCD_2[1][2]= e[4][0]

                RCD_2[0][6]= e[1][8]
                RCD_2[0][7]= e[1][5]
                RCD_2[0][8]= e[1][2]

            elif i//3 == 3:
                RCD_2[5][8]= e[0][8]
                RCD_2[5][5]= e[0][5]
                RCD_2[5][2]= e[0][2]

                RCD_2[4][8]= e[5][8]
                RCD_2[4][5]= e[5][5]
                RCD_2[4][2]= e[5][2]

                RCD_2[2][8]= e[4][8]
                RCD_2[2][5]= e[4][5]
                RCD_2[2][2]= e[4][2]

                RCD_2[0][8]= e[2][8]
                RCD_2[0][5]= e[2][5]
                RCD_2[0][2]= e[2][2]

            elif i//3 == 4:
                RCD_2[3][6]= e[2][6]
                RCD_2[3][7]= e[2][7]
                RCD_2[3][8]= e[2][8]

                RCD_2[5][2]= e[3][6]
                RCD_2[5][1]= e[3][7]
                RCD_2[5][0]= e[3][8]

                RCD_2[1][6]= e[5][2]
                RCD_2[1][7]= e[5][1]
                RCD_2[1][8]= e[5][0]

                RCD_2[2][6]= e[1][6]
                RCD_2[2][7]= e[1][7]
                RCD_2[2][8]= e[1][8]

            elif i//3 == 5:
                RCD_2[3][8]= e[4][6]
                RCD_2[3][5]= e[4][7]
                RCD_2[3][2]= e[4][8]

                RCD_2[0][2]= e[3][8]
                RCD_2[0][1]= e[3][5]
                RCD_2[0][0]= e[3][2]

                RCD_2[1][0]= e[0][2]
                RCD_2[1][3]= e[0][1]
                RCD_2[1][6]= e[0][0]

                RCD_2[4][6]= e[1][0]
                RCD_2[4][7]= e[1][3]
                RCD_2[4][8]= e[1][6]
                    
        elif i%3 == 1:
            RCD_2[i//3][8] = e[i//3][0]
            RCD_2[i//3][7] = e[i//3][1]
            RCD_2[i//3][6] = e[i//3][2]
            RCD_2[i//3][5] = e[i//3][3]
            RCD_2[i//3][4] = e[i//3][4]
            RCD_2[i//3][3] = e[i//3][5]
            RCD_2[i//3][2] = e[i//3][6]
            RCD_2[i//3][1] = e[i//3][7]
            RCD_2[i//3][0] = e[i//3][8]

            if i//3 == 0:
                RCD_2[2][2]= e[5][6]
                RCD_2[2][1]= e[5][7]
                RCD_2[2][0]= e[5][8]

                RCD_2[1][2]= e[3][2]
                RCD_2[1][1]= e[3][1]
                RCD_2[1][0]= e[3][0]

                RCD_2[5][6]= e[2][2]
                RCD_2[5][7]= e[2][1]
                RCD_2[5][8]= e[2][0]
                
                RCD_2[3][2]= e[1][2]
                RCD_2[3][1]= e[1][1]
                RCD_2[3][0]= e[1][0]

            elif i//3 == 1:
                RCD_2[4][0]= e[0][0]
                RCD_2[4][3]= e[0][3]
                RCD_2[4][6]= e[0][6]

                RCD_2[5][0]= e[2][0]
                RCD_2[5][3]= e[2][3]
                RCD_2[5][6]= e[2][6]

                RCD_2[0][0]= e[4][0]
                RCD_2[0][3]= e[4][3]
                RCD_2[0][6]= e[4][6]

                RCD_2[2][0]= e[5][0]
                RCD_2[2][3]= e[5][3]
                RCD_2[2][6]= e[5][6]

            elif i//3 == 2:
                RCD_2[4][2]= e[0][6]
                RCD_2[4][1]= e[0][7]
                RCD_2[4][0]= e[0][8]

                RCD_2[1][8]= e[3][0]
                RCD_2[1][5]= e[3][3]
                RCD_2[1][2]= e[3][6]

                RCD_2[0][6]= e[4][2]
                RCD_2[0][7]= e[4][1]
                RCD_2[0][8]= e[4][0]

                RCD_2[3][0]= e[1][8]
                RCD_2[3][3]= e[1][5]
                RCD_2[3][6]= e[1][2]

            elif i//3 == 3:
                RCD_2[4][8]= e[0][8]
                RCD_2[4][5]= e[0][5]
                RCD_2[4][2]= e[0][2]

                RCD_2[2][8]= e[5][8]
                RCD_2[2][5]= e[5][5]
                RCD_2[2][2]= e[5][2]

                RCD_2[0][8]= e[4][8]
                RCD_2[0][5]= e[4][5]
                RCD_2[0][2]= e[4][2]

                RCD_2[5][8]= e[2][8]
                RCD_2[5][5]= e[2][5]
                RCD_2[5][2]= e[2][2]

            elif i//3 == 4:
                RCD_2[5][2]= e[2][6]
                RCD_2[5][1]= e[2][7]
                RCD_2[5][0]= e[2][8]

                RCD_2[1][6]= e[3][6]
                RCD_2[1][7]= e[3][7]
                RCD_2[1][8]= e[3][8]

                RCD_2[2][6]= e[5][2]
                RCD_2[2][7]= e[5][1]
                RCD_2[2][8]= e[5][0]

                RCD_2[3][6]= e[1][6]
                RCD_2[3][7]= e[1][7]
                RCD_2[3][8]= e[1][8]

            elif i//3 == 5:
                RCD_2[0][2]= e[4][6]
                RCD_2[0][1]= e[4][7]
                RCD_2[0][0]= e[4][8]

                RCD_2[1][0]= e[3][8]
                RCD_2[1][3]= e[3][5]
                RCD_2[1][6]= e[3][2]

                RCD_2[4][6]= e[0][2]
                RCD_2[4][7]= e[0][1]
                RCD_2[4][8]= e[0][0]

                RCD_2[3][8]= e[1][0]
                RCD_2[3][5]= e[1][3]
                RCD_2[3][2]= e[1][6]

        elif i%3 == 2:
            RCD_2[i//3][6] = e[i//3][0]
            RCD_2[i//3][3] = e[i//3][1]
            RCD_2[i//3][0] = e[i//3][2]
            RCD_2[i//3][7] = e[i//3][3]
            RCD_2[i//3][4] = e[i//3][4]
            RCD_2[i//3][1] = e[i//3][5]
            RCD_2[i//3][8] = e[i//3][6]
            RCD_2[i//3][5] = e[i//3][7]
            RCD_2[i//3][2] = e[i//3][8]

            if i//3 == 0:
                RCD_2[1][2]= e[5][6]
                RCD_2[1][1]= e[5][7]
                RCD_2[1][0]= e[5][8]

                RCD_2[5][6]= e[3][2]
                RCD_2[5][7]= e[3][1]
                RCD_2[5][8]= e[3][0]

                RCD_2[3][2]= e[2][2]
                RCD_2[3][1]= e[2][1]
                RCD_2[3][0]= e[2][0]

                RCD_2[2][2]= e[1][2]
                RCD_2[2][1]= e[1][1]
                RCD_2[2][0]= e[1][0]

            elif i//3 == 1:
                RCD_2[5][0]= e[0][0]
                RCD_2[5][3]= e[0][3]
                RCD_2[5][6]= e[0][6]

                RCD_2[0][0]= e[2][0]
                RCD_2[0][3]= e[2][3]
                RCD_2[0][6]= e[2][6]

                RCD_2[2][0]= e[4][0]
                RCD_2[2][3]= e[4][3]
                RCD_2[2][6]= e[4][6]

                RCD_2[4][0]= e[5][0]
                RCD_2[4][3]= e[5][3]
                RCD_2[4][6]= e[5][6]
                
            elif i//3 == 2:
                RCD_2[1][8]= e[0][6]
                RCD_2[1][5]= e[0][7]
                RCD_2[1][2]= e[0][8]

                RCD_2[0][6]= e[3][0]
                RCD_2[0][7]= e[3][3]
                RCD_2[0][8]= e[3][6]

                RCD_2[3][0]= e[4][2]
                RCD_2[3][3]= e[4][1]
                RCD_2[3][6]= e[4][0]

                RCD_2[4][2]= e[1][8]
                RCD_2[4][1]= e[1][5]
                RCD_2[4][0]= e[1][2]

            elif i//3 == 3:
                RCD_2[2][8]= e[0][8]
                RCD_2[2][5]= e[0][5]
                RCD_2[2][2]= e[0][2]

                RCD_2[0][8]= e[5][8]
                RCD_2[0][5]= e[5][5]
                RCD_2[0][2]= e[5][2]

                RCD_2[5][8]= e[4][8]
                RCD_2[5][5]= e[4][5]
                RCD_2[5][2]= e[4][2]

                RCD_2[4][8]= e[2][8]
                RCD_2[4][5]= e[2][5]
                RCD_2[4][2]= e[2][2]

            elif i//3 == 4:
                RCD_2[1][6]= e[2][6]
                RCD_2[1][7]= e[2][7]
                RCD_2[1][8]= e[2][8]

                RCD_2[2][6]= e[3][6]
                RCD_2[2][7]= e[3][7]
                RCD_2[2][8]= e[3][8]
                
                RCD_2[3][6]= e[5][2]
                RCD_2[3][7]= e[5][1]
                RCD_2[3][8]= e[5][0]

                RCD_2[5][2]= e[1][6]
                RCD_2[5][1]= e[1][7]
                RCD_2[5][0]= e[1][8]

            elif i//3 == 5:
                RCD_2[1][0]= e[4][6]
                RCD_2[1][3]= e[4][7]
                RCD_2[1][6]= e[4][8]

                RCD_2[4][6]= e[3][8]
                RCD_2[4][7]= e[3][5]
                RCD_2[4][8]= e[3][2]

                RCD_2[3][8]= e[0][2]
                RCD_2[3][5]= e[0][1]
                RCD_2[3][2]= e[0][0]

                RCD_2[0][2]= e[1][0]
                RCD_2[0][1]= e[1][3]
                RCD_2[0][0]= e[1][6]
        for m in range(6):
            for n in range(9):
                b[(18*u)+i][m][n] = RCD_2[m][n]

#Investigating the combinations made in the first step from the fixed position, "RCD", and outputting it as "Comb_1"
moves(RCD,Comb_1,0)

#Investigating the combinations made in the second step from the first step, "Comb_1", and temporary outputting it as "RCD_3"
for u in range(len(Comb_1)):
    moves(Comb_1[u],RCD_3,u)

#Erasing the combinations in "RCD_3" that are overlapping with the ones made in the previous step, "Comb_1" and temporary outputting it as "RCD_4"
for u in range(len(RCD_3)):
    RCD_4.append([
    [0,0,0,0,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1],
    [2,2,2,2,2,2,2,2,2],
    [3,3,3,3,3,3,3,3,3],
    [4,4,4,4,4,4,4,4,4],
    [5,5,5,5,5,5,5,5,5]])
    for t in range(len(Comb_1)):
        if RCD_3[u] == Comb_1[t] or RCD_3[u] == RCD:
            break
        if t == len(Comb_1)-1:
            for x in range(6):
                for y in range(9):
                    RCD_4[u][x][y] = RCD_3[u][x][y]
for u in range(RCD_4.count(RCD)):
    RCD_4.remove(RCD)

#Copying "RCD_4" into "Comb_2"
Comb_2 = copy.deepcopy(RCD_4)

#Erasing the combinations in "Comb_2" that are overlapping the ones made in the same step, "RCD_4"
for u in range(len(RCD_4)):
    for v in range(len(RCD_4)):
        if RCD_4[u] == RCD_4[v]:
            for w in range(Comb_2.count(RCD_4[v])-1):
                Comb_2.remove(RCD_4[v])

List_of_Combinations = [
    Comb_1,Comb_2,Comb_3,Comb_4,Comb_5,Comb_6,Comb_7,Comb_8,Comb_9,Comb_10,Comb_11,Comb_12,Comb_13,Comb_14,Comb_15,Comb_16,Comb_17,Comb_18]


for h in range(1):
    RCD_5 = []
    RCD_6 = []
    for u in range(len(List_of_Combinations[h+1])):
                   moves(List_of_Combinations[h+1][u],RCD_5,u)

    for u in range(len(RCD_5)):
        RCD_6.append([
        [0,0,0,0,0,0,0,0,0],
        [1,1,1,1,1,1,1,1,1],
        [2,2,2,2,2,2,2,2,2],
        [3,3,3,3,3,3,3,3,3],
        [4,4,4,4,4,4,4,4,4],
        [5,5,5,5,5,5,5,5,5]])
        for t in range(len(List_of_Combinations[h+1])):
            if RCD_5[u] == List_of_Combinations[h+1][t] or RCD_5[u] == RCD:
                break
            if t == len(List_of_Combinations[h+1])-1:
                for x in range(6):
                    for y in range(9):
                        RCD_6[u][x][y] = RCD_5[u][x][y]

    for u in range(RCD_6.count(RCD)):
        RCD_6.remove(RCD)

    for u in range(len(RCD_6)):
        RCD_4.append(RCD_6[u])

    List_of_Combinations[h+2] = copy.deepcopy(RCD_6)

    for u in range(len(RCD_4)):
        for v in range(len(RCD_4)):
            if RCD_4[u] == RCD_4[v]:
                for w in range(List_of_Combinations[h+2].count(RCD_4[v])-1):
                    List_of_Combinations[h+2].remove(RCD_4[v])

Comb_3 = copy.deepcopy(List_of_Combinations[2])
print("Combinations in 1st Step: {}".format(len(Comb_1)))
print("Combinations in 2nd Step: {}".format(len(Comb_2)))
print("Combinations in 3rd Step: {}".format(len(Comb_3)))
for u in range(15):
    print("Combinations in {}th Step: {}".format(u+4,len(List_of_Combinations[u+3])))
